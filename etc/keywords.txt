#=====================================================================================
# MDL关键字
#=====================================================================================
import message vector boolean byte short int long float double string map
null compress extends command

%
#=====================================================================================
# C#关键字
#=====================================================================================
abstract as base bool break byte case catch char checked class const continue
decimal default delegate do double else enum event explicit extern false finally
fixed float for foreach goto if implicit in int interface internal is lock long
namespace new null object operator out override params private protected public
readonly ref return sbyte sealed short sizeof stackalloc static string struct
switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual
void volatile while add alias ascending async await descending dynamic from get
global group into join let orderby partial remove select set value var where yield

#=====================================================================================
# C++关键字
#=====================================================================================
alignas alignof and and_eq asm auto bitand bitor bool break case catch char 
char16_t char32_t class compl const constexpr const_cast continue decltype default
delete do double dynamic_cast else enum explicit export extern false float for 
friend goto if inline int long mutable namespace new noexcept not not_eq nullptr
operator or or_eq private protected public register reinterpret_cast return short
signed sizeof static static_assert static_cast struct switch template this 
thread_local throw true try typedef typeid typename union unsigned using virtual 
void volatile wchar_t while xor xor_eq 

#=====================================================================================
# Objective-C关键字
#=====================================================================================
auto BOOL break Class case bycopy char byref const id continue IMP default in 
do inout double nil else NO enum NULL extern oneway float out for Protocol 
goto SEL if self inline super int YES long interface register end restrict
implementation return protocol short class signed public sizeof protected 
static private struct property switch try typedef throw union catch unsigned finally
void synthesize volatile dynamic while selector _Bool atomic _Complex nonatomic 
_Imaginery retain alloc autorelease release

#=====================================================================================
# Java关键字
#=====================================================================================
abstract continue for new switch assert default goto package synchronized boolean
do if private this break double implements protected throw byte else import public
throws case enum instanceof return transient catch extends int short try char final
interface static void class finally long strictfp volatile const float native super
while

#=====================================================================================
# Python关键字
#=====================================================================================
and del from not while as elif global or with assert else if pass yield break except
import print class exec in raise continue finally is return def for lambda try

#=====================================================================================
# PHP关键字
#=====================================================================================
__halt_compiler abstract and array as break callable case catch class clone const
continue declare default die do echo else elseif empty enddeclare endfor endforeach
endif endswitch endwhile eval exit extends final for foreach function global goto if
implements include include_once instanceof insteadof interface isset list namespace
new or print private protected public require require_once return static switch
throw trait try unset use var while xor __CLASS__ __DIR__ __FILE__ __FUNCTION__
__LINE__ __METHOD__ __NAMESPACE__ __TRAIT__

