/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 * @DIGEST ${messageBean.digest}
 *****************************************************************************/
##
#set ($basicTypeMap = {
	"byte"		: "byte", 
	"boolean"	: "bool",
	"short"		: "short",
	"int"		: "int",
	"long"		: "long",
	"float"		: "float",
	"double"	: "double",
	"string"	: "string"
})
##
#set ($defaultValueMap = {
	"byte"		: "(byte) 0", 
	"boolean"	: "false",
	"short"		: "(short) 0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0.00",
	"string"	: "null"
})
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${field.type.keyType.name}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}##
#else
${field.type.valueType.name}##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (attributeType $field)
#if ($field.type.map)
IDictionary<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}[]##
#else
${basicTypeMap[${field.type.elementType.name}]}[]##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
IList<$field.type.elementType.clazzName>##
#else
IList<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏：为field创建实例时的类型。
#macro (instanceType $field)
#if ($field.type.map)
Dictionary<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}##
#else
${basicTypeMap[${field.type.elementType.name}]}##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
List<$field.type.elementType.clazzName>##
#else
List<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map)
null##
#else
${defaultValueMap[$field.type.name]}##
#end
#end
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${basicTypeMap[$field.type.keyType.name]}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}##
#else
${basicTypeMap[$field.type.valueType.name]}##
#end
#end
##
## 宏: 生成reader方法名
#macro (reader $field $format)
#if ($field.type.map)
${format}.ReadMap<#mapKeyType($field), #mapValueType($field)>("${field.name}", __${field.name})##
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.ReadVector<${field.type.elementType.clazzName}>("${field.name}", __${field.name})##
#else
${format}.ReadVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", __${field.name})##
#end
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.ReadArray<${field.type.elementType.clazzName}>("${field.name}")##
#else
${format}.ReadArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}")##
#end
#elseif ($field.type.bean)
${format}.Read("${field.name}", typeof(${field.type.clazzName}))##
#else
${format}.Read("${field.name}", typeof(${basicTypeMap[$field.type.name]}))##
#end
#end
##
## 宏: 生成writer方法名
#macro (writer $field $format)
#if ($field.type.map)
${format}.WriteMap<#mapKeyType($field), #mapValueType($field)>("${field.name}", this.${field.name})##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.WriteArray<${field.type.elementType.clazzName}>("${field.name}", this.${field.name})##
#else
${format}.WriteArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", this.${field.name})##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.WriteVector<${field.type.elementType.clazzName}>("${field.name}", this.${field.name})##
#else
${format}.WriteVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", this.${field.name})##
#end
#elseif ($field.type.bean)
${format}.Write<${field.type.clazzName}>("${field.name}", this.${field.name})##
#else
${format}.Write<${basicTypeMap[$field.type.name]}>("${field.name}", this.${field.name})##
#end
#end
##
## 宏：生成C# property名字的方法
#macro (propertyName $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
${firstCh.toUpperCase()}${others}##
#end
##
using System;
using System.Collections.Generic;
using System.IO;

using MessageBuffer;
using Calibur;

namespace ${package}
{
	/*
	 * 消息${messageBean.clazzName}
#if ($messageBean.hasDoc())
	 *
#foreach ($line in $messageBean.doc)
	 * ${line}
#end
#end
	 */
	public class ${messageBean.clazzName} : ${messageBean.parentClazzName}
	{
		/*
		 * 创建新实例
		 */
		public new static ${messageBean.clazzName} Instance {
			get {
				return (${messageBean.clazzName}) ${factoryName}.Instance.
						BorrowMessageBean(typeof(${messageBean.clazzName}));
			}
		}
		
		internal ${messageBean.clazzName}() : base()
		{
		}

		internal ${messageBean.clazzName}(int cmdId) : base(cmdId)
		{
		}

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if ($field.hasDoc())
#foreach ($line in $field.doc)
		/* ${line} */
#end
#end
		public #attributeType($field) ${field.name} = #defaultValue($field);
#if ($field.type.vector || $field.type.map)
		private #attributeType($field) __${field.name} = new #instanceType($field)();
		public #attributeType($field) #propertyName($field) {
			get { return ${field.name} == null ? (${field.name} = __${field.name}) : ${field.name}; }
		}
#end

#end
		/**
		 * 向指定的流中写入MessageBean
		 *
		 * @param output 用于写入MessageBean的System.IO.Stream对象
		 */
		public override void Serialize(Stream output)
		{
			BinaryMessageBeanFormat format = new BinaryMessageBeanFormat(
					output, ${factoryName}.Instance);
			Serialize(format);
		}
		
		/*
		 * 序列化方法
		 */
		public override void Serialize(MessageBeanFormat format)
		{
			/* 标记开始输出MessageBean */
			format.BeginWriteBean(this.GetType(), "${messageBean.clazzName}");
			
			/* 序列化基类 */
			base.Serialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
			/* 序列化字段${field.name} */
			#writer($field "format");
#end

			/* 标记结束输出MessageBean */
			format.EndWriteBean(this.GetType(), "${messageBean.clazzName}");
		}
		
		/**
		 * 从指定的流中读入MessageBean
		 *
		 * @param format 用于读入MessageBean的java.io.InputStream对象
		 */
		public override MessageBean Deserialize(Stream input)
		{
			BinaryMessageBeanFormat format = new BinaryMessageBeanFormat(
					input, ${factoryName}.Instance);
			return Deserialize(format);
		}

		/*
		 * 反序列化方法
		 */
		public override MessageBean Deserialize(MessageBeanFormat format)
		{
			/* 反序列化基类 */
			base.Deserialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
			/* 反序列化字段${field.name} */
			this.${field.name} = (#attributeType($field)) #reader($field "format");
#end

			return this;
		}

		/*
		 * 设置各字段的缺省值
		 */
		public override void Clear() 
		{
			/* 清空父类 */
			base.Clear();

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
			${field.name} = #defaultValue($field);
#if ($field.type.vector || $field.type.map)
			__${fieldName}.Clear();
#end

#end
		}
	}
}
