/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 *****************************************************************************/
using System;
using System.Collections.Generic;

using MessageBuffer;
using Calibur;

namespace ${package} {
	public class ${factoryName} : MessageBeanFactory
	{
		private static readonly ${factoryName} singleton = new ${factoryName}();
		public static ${factoryName} Instance {
			get { return singleton; }
		}
		
		private IDictionary<Type, int> typeMap;

		private ${factoryName}() : base()
		{
			typeMap = new Dictionary<Type, int>();
#foreach ($messageBean in $allMessageBeans)
			typeMap[typeof(${messageBean.clazzName})] = ${messageBean.typeId};
#end
		}
		
		public override bool NeedZip(int cmdId)
		{
#if ($zipCommands.size() > 0)
			switch (cmdId) {
#foreach ($cmdid in $zipCommands)
				case $cmdid:
#end
					return true;
			
				default:
					return false;
			}
#else
			return false;
#end
		}
		
		public override Type GetMessageBeanType(int cmdId)
		{
			switch (cmdId) {
#foreach ($command in $commands)
#if ($command.hasDoc())
#foreach ($line in $command.doc)
				// $line
#end
#end
#if ($command.input.messageBean)
#set ($mbean = $command.input.messageBean)
				case  ${command.id}:	return typeof(${mbean.clazzName});
#end
#if ($command.output.messageBean)
#set ($mbean = $command.output.messageBean)
				case -${command.id}:	return typeof(${mbean.clazzName});
#end

#end			
				default:
            		throw new ArgumentException("Undefined command ID and message bean class map:" + cmdId);
			}
		}

		public override MessageBean CreateMessageBean(Type type) {
			MessageBean mbean = null;
			switch (typeMap[type]) {
#foreach ($messageBean in $allMessageBeans)
			case ${messageBean.typeId}:
				mbean = new ${messageBean.clazzName}();
				break;
				
#end
			default:
				mbean = null;
				break;
			}
			
			if (mbean != null) {
				mbean.set${factoryName}(this);
			}
			
			return mbean;
		}
	}
}

