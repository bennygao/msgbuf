/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 *****************************************************************************/
##
#set ($basicTypeMap = {
	"byte"		: "byte", 
	"boolean"	: "bool",
	"short"		: "int16_t",
	"int"		: "int32_t",
	"long"		: "int64_t",
	"float"		: "float",
	"double"	: "double",
	"string"	: "string"
})
##
#set ($defaultValueMap = {
	"byte"		: "0", 
	"boolean"	: "false",
	"short"		: "0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0",
	"string"	: "NULL"
})
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${field.type.keyType.name}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}*##
#else
${field.type.valueType.name}##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (interfaceType $field)
#if ($field.type.map)
map<#mapKeyType($field), #mapValueType($field)>*##
#elseif ($field.type.bean)
${field.type.clazzName}*##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
vector<${field.type.elementType.clazzName}*>*##
#else
varray<${basicTypeMap[${field.type.elementType.name}]}>*##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
vector<$field.type.elementType.clazzName*>*##
#else
vector<${basicTypeMap[${field.type.elementType.name}]}>*##
#end
#elseif ($field.type.name == "string")
${basicTypeMap[$field.type.name]}*##
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (setElementType $type)
#if ($type.basic || $type.name == "string")
$basicTypeMap[$type.name]##
#else
$type.clazzName*##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (attributeType $field)
#if ($field.type.map)
map<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
varray<${field.type.elementType.clazzName}*>##
#else
vector<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
vector<$field.type.elementType.clazzName*>##
#else
vector<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏：生成property名字的方法
#macro (propertyName $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
${firstCh.toUpperCase()}${others}##
#end
##
## 宏：为field创建实例时的类型。
#macro (instanceType $field)
#if ($field.type.map)
Dictionary<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}##
#else
${basicTypeMap[${field.type.elementType.name}]}##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
List<$field.type.elementType.clazzName>##
#else
List<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map)
NULL##
#else
${defaultValueMap[$field.type.name]}##
#end
#end
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${basicTypeMap[$field.type.keyType.name]}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}##
#else
${basicTypeMap[$field.type.valueType.name]}##
#end
#end
##
## 宏: 生成reader方法名
#macro (reader $field $format)
#if ($field.type.map)
${format}.ReadMap<#mapKeyType($field), #mapValueType($field)>("${field.name}")##
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.ReadVector<${field.type.elementType.clazzName}>("${field.name}")##
#else
${format}.ReadVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}")##
#end
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.ReadArray<${field.type.elementType.clazzName}>("${field.name}")##
#else
${format}.ReadArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}")##
#end
#elseif ($field.type.bean)
${format}.Read("${field.name}", typeof(${field.type.clazzName}))##
#else
${format}.Read("${field.name}", typeof(${basicTypeMap[$field.type.name]}))##
#end
#end
##
## 宏: 生成writer方法名
#macro (writer $field $format)
#if ($field.type.map)
${format}.WriteMap<#mapKeyType($field), #mapValueType($field)>("${field.name}", #propertyName($field))##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.WriteArray<${field.type.elementType.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.WriteArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", #propertyName($field))##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.WriteVector<${field.type.elementType.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.WriteVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", #propertyName($field))##
#end
#elseif ($field.type.bean)
${format}.Write<${field.type.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.Write<${basicTypeMap[$field.type.name]}>("${field.name}", #propertyName($field))##
#end
#end
##
#macro (baseClazzName $messageBean)
#if ($messageBean.hasParent())
${messageBean.parentClazzName}##
#else
MessageBean##
#end
#end
##
#macro (messageId $messageBean)
${messageBean.clazzName.length()}${messageBean.clazzName}##
#end
##
#macro (prototypeDecl $field)
${field.type.prototype} ${field.name}##
#end
##
#macro (typeName $type)
#if ($type.bean)
${type.clazzName}##
#else
${basicTypeMap[$type.name]}##
#end
#end
##
#macro (elementTypeId $type)
#if ($type.bean)
dt_message_ptr##
#else
dt_${type.name}##
#end
#end
##

\#include <iostream>
\#include <string>
\#include <vector>
\#include <map>

\#include "msgbuf.h"
\#include "${package}.h"

using namespace std;
using namespace msgbuf;
using namespace ${package};

#foreach ($messageBean in $allMessageBeans)
///////////////////////////////////////////////////////////////////////////////
// Implementation of ${messageBean.clazzName}
///////////////////////////////////////////////////////////////////////////////	
${messageBean.clazzName}::${messageBean.clazzName}(int cmdId) : #baseClazzName($messageBean)(cmdId) {
	__typeId = ${messageBean.typeId};
	__typeName = "${messageBean.clazzName}";
		
	clear();

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map || $field.type.name == "string")
	p#propertyName($field).setContainer(this);
	p#propertyName($field).getter(&${messageBean.clazzName}::get#propertyName($field));

#end
#end
}

${messageBean.clazzName}::~${messageBean.clazzName}(void) {
}

void ${messageBean.clazzName}::serialize(ostream &output) {
	BinaryMessageBeanFormat format(${factoryName}::instance());
	format.setOutput(&output);
	serialize(format);
}

void ${messageBean.clazzName}::serialize(MessageBeanFormat &format) {
	format.beginWriteBean(typeid(*this), typeid(${messageBean.clazzName}), "${messageBean.clazzName}");

	// serialize base
	#baseClazzName($messageBean)::serialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
	// serialize field: $field.name
#if ($field.type.basic)
	format.write<${basicTypeMap[$field.type.name]}>(&this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type)", dt_$field.type.name, dt_none, 0);
#elseif ($field.type.name == "string")
	format.write<${basicTypeMap[$field.type.name]}>(this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type)", dt_$field.type.name, dt_none, 0);
#elseif ($field.type.bean)
	format.write<${field.type.clazzName}>(this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type)", dt_message, dt_none, 0);
#elseif ($field.type.vector)
	format.writeVector<#setElementType($field.type.elementType)>(this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type.elementType)", #elementTypeId($field.type.elementType));
#elseif ($field.type.array)
	format.writeArray<#setElementType($field.type.elementType)>(this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type.elementType)", #elementTypeId($field.type.elementType));

#else
	format.writeMap<#mapKeyType($field), #mapValueType($field)>(this->${field.name}, "#prototypeDecl($field)", "#typeName($field.type.keyType)", #elementTypeId($field.type.keyType), "#typeName($field.type.valueType)", #elementTypeId($field.type.valueType));
#end
#end

	format.endWriteBean(typeid(*this), typeid(${messageBean.clazzName}), "${messageBean.clazzName}");
}

void ${messageBean.clazzName}::deserialize(istream &input) {
	BinaryMessageBeanFormat format(${factoryName}::instance());
	format.setInput(&input);
	deserialize(format);
}

void ${messageBean.clazzName}::deserialize(MessageBeanFormat &format) {
	// serialize base
	#baseClazzName($messageBean)::deserialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
	// deserialize field: $field.name
#if ($field.type.basic)
	format.read<${basicTypeMap[$field.type.name]}>(&this->${field.name}, "#typeName($field.type)", dt_$field.type.name);
#elseif ($field.type.name == "string")
	${field.name} = format.read<string>(&this->__${field.name}, "#typeName($field.type)", dt_$field.type.name);
#elseif ($field.type.bean)
	${field.name} = format.read<${field.type.clazzName}>(&this->__${field.name}, "#typeName($field.type)", dt_message);
#elseif ($field.type.vector)
	${field.name} = format.readVector<#setElementType($field.type.elementType)>(&this->__${field.name}, "#typeName($field.type.elementType)", #elementTypeId($field.type.elementType));
#elseif ($field.type.array)
	${field.name} = format.readArray<#setElementType($field.type.elementType)>(&this->__${field.name}, "#typeName($field.type.elementType)", #elementTypeId($field.type.elementType));
#else
	${field.name} = format.readMap<#mapKeyType($field), #mapValueType($field)>(&this->__${field.name}, "#typeName($field.type.keyType)", #elementTypeId($field.type.keyType), "#typeName($field.type.valueType)", #elementTypeId($field.type.valueType));
#end
#end
}
    
void ${messageBean.clazzName}::clear(void) {
   	// clear base
   	#baseClazzName($messageBean)::clear();
    	
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
	// clear field: ${field.name}
#if ($field.type.basic)
	${field.name} = #defaultValue($field);
#else
	__${field.name}.clear();
	${field.name} = NULL;
#end
#end
}

void ${messageBean.clazzName}::release() {
	${factoryName}::instance()->returnMessageBean(this);
}

#end

///////////////////////////////////////////////////////////////////////////////
// Implementation of ${factoryName}
///////////////////////////////////////////////////////////////////////////////	
${factoryName}::${factoryName}(void) {
#foreach ($messageBean in $allMessageBeans)
	mbMap["${messageBean.clazzName}"] = $messageBean.typeId;
#end
}
	
${factoryName}::~${factoryName}() {
}

int ${factoryName}::getTypeId(const string &typeName) {
	map<string, int>::iterator itr = mbMap.find(typeName);
	if (itr == mbMap.end()) {
		return -1;
	} else {
		return itr->second;
	}
}
	
MessageBean* ${factoryName}::createMessageBean(const string &typeName) {
	int typeId = getTypeId(typeName);
	MessageBean *mbean = NULL;
	switch (typeId) {
#foreach ($messageBean in $allMessageBeans)
	case ${messageBean.typeId}:
		mbean = new ${messageBean.clazzName}();
		break;
#end
	default:
		mbean = NULL;
		break;
	}
		
	if (mbean != NULL) {
		mbean->__instanceId = getInstanceId();
		mbean->__typeId = typeId;
	}
		
	return mbean;
}
