/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 *****************************************************************************/
##
#set ($basicTypeMap = {
	"byte"		: "byte", 
	"boolean"	: "bool",
	"short"		: "int16_t",
	"int"		: "int32_t",
	"long"		: "int64_t",
	"float"		: "float",
	"double"	: "double",
	"string"	: "string"
})
##
#set ($defaultValueMap = {
	"byte"		: "0", 
	"boolean"	: "false",
	"short"		: "0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0",
	"string"	: "NULL"
})
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${field.type.keyType.name}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}*##
#else
${field.type.valueType.name}##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (interfaceType $field)
#if ($field.type.map)
map<#mapKeyType($field), #mapValueType($field)>*##
#elseif ($field.type.bean)
${field.type.clazzName}*##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
varray<${field.type.elementType.clazzName}*>*##
#else
varray<${basicTypeMap[${field.type.elementType.name}]}>*##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
vector<$field.type.elementType.clazzName*>*##
#else
vector<${basicTypeMap[${field.type.elementType.name}]}>*##
#end
#elseif ($field.type.name == "string")
${basicTypeMap[$field.type.name]}*##
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (setElementType $type)
#if ($type.basic || $type.name == "string")
$basicTypeMap[$type.name]##
#else
$type.clazzName*##
#end
#end
##
## 宏：生成field作为属性时的C#类型，用于field声明和getter/setter返回值或者参数。
#macro (attributeType $field)
#if ($field.type.map)
map<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
varray<${field.type.elementType.clazzName}*>##
#else
varray<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
vector<$field.type.elementType.clazzName*>##
#else
vector<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏：生成property名字的方法
#macro (propertyName $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
${firstCh.toUpperCase()}${others}##
#end
##
## 宏：为field创建实例时的类型。
#macro (instanceType $field)
#if ($field.type.map)
Dictionary<#mapKeyType($field), #mapValueType($field)>##
#elseif ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}##
#else
${basicTypeMap[${field.type.elementType.name}]}##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
List<$field.type.elementType.clazzName>##
#else
List<${basicTypeMap[${field.type.elementType.name}]}>##
#end
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map)
NULL##
#else
${defaultValueMap[$field.type.name]}##
#end
#end
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${basicTypeMap[$field.type.keyType.name]}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}##
#else
${basicTypeMap[$field.type.valueType.name]}##
#end
#end
##
## 宏: 生成reader方法名
#macro (reader $field $format)
#if ($field.type.map)
${format}.ReadMap<#mapKeyType($field), #mapValueType($field)>("${field.name}")##
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.ReadVector<${field.type.elementType.clazzName}>("${field.name}")##
#else
${format}.ReadVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}")##
#end
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.ReadArray<${field.type.elementType.clazzName}>("${field.name}")##
#else
${format}.ReadArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}")##
#end
#elseif ($field.type.bean)
${format}.Read("${field.name}", typeof(${field.type.clazzName}))##
#else
${format}.Read("${field.name}", typeof(${basicTypeMap[$field.type.name]}))##
#end
#end
##
## 宏: 生成writer方法名
#macro (writer $field $format)
#if ($field.type.map)
${format}.WriteMap<#mapKeyType($field), #mapValueType($field)>("${field.name}", #propertyName($field))##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.WriteArray<${field.type.elementType.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.WriteArray<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", #propertyName($field))##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.WriteVector<${field.type.elementType.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.WriteVector<${basicTypeMap[$field.type.elementType.name]}>("${field.name}", #propertyName($field))##
#end
#elseif ($field.type.bean)
${format}.Write<${field.type.clazzName}>("${field.name}", #propertyName($field))##
#else
${format}.Write<${basicTypeMap[$field.type.name]}>("${field.name}", #propertyName($field))##
#end
#end
##
#macro (baseClazzName $messageBean)
#if ($messageBean.hasParent())
${messageBean.parentClazzName}##
#else
MessageBean##
#end
#end
##
#macro (messageId $messageBean)
${messageBean.clazzName.length()}${messageBean.clazzName}##
#end
##
#macro (prototypeDecl $field)
${field.type.prototype} ${field.name}##
#end
##
#macro (typeName $type)
#if ($type.bean)
${type.clazzName}##
#else
${basicTypeMap[$type.name]}##
#end
#end
##
#macro (elementTypeId $type)
#if ($type.bean)
dt_message_ptr##
#else
dt_${type.name}##
#end
#end
##

#ifndef ____${package.toUpperCase()}____H____
\#define ____${package.toUpperCase()}____H____

\#include <iostream>
\#include <string>
\#include <vector>
\#include <map>

\#include "msgbuf.h"

using namespace std;
using namespace msgbuf;

// Begin of namespace $package
namespace ${package} {
///////////////////////////////////////////////////////////////////////////////
#foreach ($messageBean in $allMessageBeans)
class ${messageBean.clazzName};
#end

class ${factoryName}: public MessageBeanFactory {
public:
	static inline ${factoryName}* instance() {
		static ${factoryName} instance;
		return &instance;
	}

	virtual MessageBean* createMessageBean(const string &typeName);

private:
	map<string, int> mbMap;
	
	${factoryName}(void);
	~${factoryName}(void);
	${factoryName}(const ${factoryName}&);
	${factoryName}& operator= (const ${factoryName}&);

protected:
	virtual int getTypeId(const string &typeName);
};

#foreach ($messageBean in $allMessageBeans)
///////////////////////////////////////////////////////////////////////////////
/**
 * 消息${messageBean.clazzName}
#if ($messageBean.hasDoc())
#foreach ($line in $messageBean.doc)
 * ${line}
#end
#end
 */
class ${messageBean.clazzName}: public #baseClazzName($messageBean)

{
	friend class ${factoryName};
#foreach ($friend in ${messageBean.inheritors})
	friend class ${friend.clazzName};
#end
#foreach ($depend in ${messageBean.dependedBy})
	friend class ${depend.clazzName};
#end
#if (${messageBean.hasParent()})
	friend class ${messageBean.parentClazzName};
#end

public:
	static ${messageBean.clazzName}* instance(int cmdId = 0) {
		${messageBean.clazzName} *instance = (${messageBean.clazzName}*) ${factoryName}::instance()->borrowMessageBean("${messageBean.clazzName}");
		instance->commandId = cmdId;
		return instance;
	}
		
private:
	${messageBean.clazzName}(int cmdId = 0);
	virtual ~${messageBean.clazzName}(void);
	
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map || $field.type.name == "string")
	#attributeType($field) __${field.name};
#end
#end

public:	
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if ($field.hasDoc())
	/**
#foreach ($line in $field.doc)
	 * ${line}
#end
	 */
#end
	#interfaceType($field) ${field.name};
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map || $field.type.name == "string")
	Property<${messageBean.clazzName}, #interfaceType($field), READ_ONLY> p#propertyName($field);
#end

#end
	
	virtual void serialize(ostream &output);
	virtual void serialize(MessageBeanFormat &format);
	virtual void deserialize(istream &input);
    virtual void deserialize(MessageBeanFormat &format);
    virtual void clear(void);
    virtual void release();
	
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if (!$field.type.basic)
	virtual inline #interfaceType($field) get#propertyName($field)(void) { return (${field.name} = &__${field.name}); }
#end
#end
};

#end

// End of namespace $package
}

#endif
