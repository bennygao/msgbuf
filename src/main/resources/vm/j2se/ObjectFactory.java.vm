/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 *****************************************************************************/

package ${package};

import ${msgbufPackage}.*;

public class ObjectFactory extends CommandFactory {
	static class SingletonHolder {
		static ObjectFactory singleton = new ObjectFactory();
	}
	
	public static ObjectFactory getInstance() {
		return SingletonHolder.singleton;
	}

	private ObjectFactory() {
		super();

#foreach ($command in $commands)
#if ($command.hasDoc())
#foreach ($line in $command.doc)
		// ${line}
#end
#end
		addCommand(new Command(
				${command.id}, 
#if (${command.input.messageBean})
				new CommandArgument(${command.id}, ARG_INPUT, ${command.input.messageBean.clazzName}.class, ${command.input.compressed}, this), 
#else
				new CommandArgument(${command.id}, ARG_INPUT, this),
#end
#if (${command.output.messageBean})
				new CommandArgument(${command.id}, ARG_OUTPUT, ${command.output.messageBean.clazzName}.class, ${command.output.compressed}, this) 
#else
				new CommandArgument(${command.id}, ARG_OUTPUT, this)
#end
			)
		);

#end
	}
	
	public MessageBean borrowMessageBean(int typeId) {
		switch (typeId) {
#foreach ($mbean in $allMessageBeans)
		case ${mbean.typeId}:
			return borrowMessageBean(${mbean.clazzName}.class);

#end	
		default:
			throw new IllegalArgumentException("Not exists MessageBean typeId " + typeId);
		}
	}
}
