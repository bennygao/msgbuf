/******************************************************************************
 * ${fileName}
 * GENERATED BY MessageCompiler, DON'T MODIFY MANULLY.
 * Generated Time: ${createTime}
 * @DIGEST ${messageBean.digest}
 *****************************************************************************/
##
#set ($basicTypeMap = {
	"byte"		: "byte", 
	"boolean"	: "boolean",
	"short"		: "short",
	"int"		: "int",
	"long"		: "long",
	"float"		: "float",
	"double"	: "double",
	"string"	: "String"
})
##
#set ($classTypeMap = {
	"byte"		: "Byte", 
	"boolean"	: "Boolean",
	"short"		: "Short",
	"int"		: "Integer",
	"long"		: "Long",
	"float"		: "Float",
	"double"	: "Double",
	"string"	: "String"
})
##
#set ($defaultValueMap = {
	"byte"		: "(byte) 0", 
	"boolean"	: "false",
	"short"		: "(short) 0",
	"int"		: "0",
	"long"		: "0L",
	"float"		: "0",
	"double"	: "0.00",
	"string"	: "null"
})
##
## 宏：生成作为Map的key时的类型
#macro (mapKeyType $field)
#if ($field.type.keyType.bean)
${field.type.keyType.clazzName}##
#else
${classTypeMap[$field.type.keyType.name]}##
#end
#end
## 宏：生成作为Map的value时的类型
#macro (mapValueType $field)
#if ($field.type.valueType.bean)
${field.type.valueType.clazzName}##
#else
${classTypeMap[$field.type.valueType.name]}##
#end
#end
##
#macro (containerType $field)
#if ($field.type.vector)
#if ($field.type.elementType.bean)
ArrayList<$field.type.elementType.clazzName>##
#else
ArrayList<${classTypeMap[${field.type.elementType.name}]}>##
#end
#else
HashMap<#mapKeyType($field), #mapValueType($field)>##
#end
#end
##
## 宏：生成field作为属性时的Java类型，用于field声明和getter/setter返回值或者参数。
#macro (attributeType $field)
#if ($field.type.bean)
${field.type.clazzName}##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}[]##
#else
${basicTypeMap[${field.type.elementType.name}]}[]##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
List<$field.type.elementType.clazzName>##
#else
List<${classTypeMap[${field.type.elementType.name}]}>##
#end
#elseif ($field.type.map)
Map<#mapKeyType($field), #mapValueType($field)>##
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
## 宏: 生成field的缺省值
#macro (defaultValue $field)
#if ($field.type.bean || $field.type.array || $field.type.vector || $field.type.map)
null##
#else
${defaultValueMap[$field.type.name]}##
#end
#end
##
## 宏: 生成reader方法名
#macro (reader $field $format)
#if ($field.type.map)
${format}.readMap("${field.name}", #mapKeyType($field).class, #mapValueType($field).class, $_${field.name})##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
(#attributeType($field)) ${format}.readArray("${field.name}", ${field.type.elementType.clazzName}.class)##
#else
(#attributeType($field)) ${format}.readArray("${field.name}", ${basicTypeMap[$field.type.elementType.name]}.class)##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.readVector("${field.name}", ${field.type.elementType.clazzName}.class, $_${field.name})##
#else
${format}.readVector("${field.name}", ${classTypeMap[$field.type.elementType.name]}.class, $_${field.name})##
#end
#elseif ($field.type.bean)
${format}.read("${field.name}", ${field.type.clazzName}.class)##
#else
${format}.read("${field.name}", ${basicTypeMap[$field.type.name]}.class)##
#end
#end
##
## 宏: 生成writer方法名
#macro (writer $field $format)
#if ($field.type.map)
${format}.writeMap("${field.name}", #getter($field)(), #mapKeyType($field).class, #mapValueType($field).class)##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${format}.writeArray("${field.name}", #getter($field)(), ${field.type.elementType.clazzName}.class)##
#else
${format}.writeArray("${field.name}", #getter($field)(), ${basicTypeMap[$field.type.elementType.name]}.class)##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
${format}.writeVector("${field.name}", #getter($field)(), ${field.type.elementType.clazzName}.class)##
#else
${format}.writeVector("${field.name}", #getter($field)(), ${classTypeMap[$field.type.elementType.name]}.class)##
#end
#elseif ($field.type.bean)
${format}.write("${field.name}", #getter($field)(), ${field.type.clazzName}.class)##
#else
${format}.write("${field.name}", #getter($field)(), ${basicTypeMap[$field.type.name]}.class)##
#end
#end
##
## 宏：生成field的getter方法。
#macro (getter $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
get${firstCh.toUpperCase()}${others}##
#end
##
## 宏：生成field的setter方法。
#macro (setter $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
set${firstCh.toUpperCase()}${others}##
#end
##
## 宏：生成field的newer方法。
#macro (newer $field)
#set ($firstCh = $field.name.substring(0, 1))
#set ($others = $field.name.substring(1))
new${firstCh.toUpperCase()}${others}##
#end
##
## 宏：生成创建field时的原型。
#macro (newerType $field $count)
#if ($field.type.bean)
${field.type.clazzName}()##
#elseif ($field.type.array)
#if ($field.type.elementType.bean)
${field.type.elementType.clazzName}[$count]##
#else
${basicTypeMap[${field.type.elementType.name}]}[$count]##
#end
#elseif ($field.type.vector)
#if ($field.type.elementType.bean)
ArrayList<$field.type.elementType.clazzName>()##
#else
ArrayList<${classTypeMap[${field.type.elementType.name}]}>()##
#end
#elseif ($field.type.map)
HashMap<#mapKeyType($field), #mapValueType($field)>()##
#else
${basicTypeMap[$field.type.name]}##
#end
#end
##
package ${package};

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
#if ($messageBean.containsVector())
import java.util.List;
import java.util.ArrayList;
#end
#if ($messageBean.containsMap())
import java.util.Map;
import java.util.HashMap;
#end

import net.sf.calibur.msgbuf.*;

/**
 * 消息${messageBean.clazzName}
#if ($messageBean.hasDoc())
 *
#foreach ($line in $messageBean.doc)
 * ${line}
#end
#end
 */
public class ${messageBean.clazzName} extends ${messageBean.parentClazzName} {
	public static ${messageBean.clazzName} getInstance() {
		return ${factoryName}.getInstance().borrowMessageBean(${messageBean.clazzName}.class);
	}

	//////////////////////////////////////////////////////////////////////////
	// 属性成员定义
	//////////////////////////////////////////////////////////////////////////
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
#if ($field.hasDoc())
	/**
#foreach ($line in $field.doc)
	 * ${line}
#end
	 */
#else
	// ${field.name}
#end
	private #attributeType($field) ${field.name} = #defaultValue($field);
#if ($field.type.vector || $field.type.map)
	private #attributeType($field) $_${field.name} = new #containerType($field)();
#end

#end
	//////////////////////////////////////////////////////////////////////////
	// 构造方法
	//////////////////////////////////////////////////////////////////////////
	/**
	 * 缺省构造方法
	 */
	public ${messageBean.clazzName}() {
		super(${messageBean.typeId});
	}
	
	protected ${messageBean.clazzName}(int typeId) {
		super(typeId);
	}

	//////////////////////////////////////////////////////////////////////////
	// 属性成员的getter/setter方法
	//////////////////////////////////////////////////////////////////////////
#foreach ($fieldName in $messageBean.fieldsName)
#set($field = ${messageBean.getField($fieldName)})
	public #attributeType($field) #getter($field)() {
		return this.${field.name};
	}

	public ${messageBean.clazzName} #setter($field)(#attributeType($field) ${field.name}) {
		this.${field.name} = ${field.name};
		return this;
	}
#if ($field.type.bean)

	public #attributeType($field) #newer($field)() {
		if (this.${field.name} == null) {
			return this.${field.name} = ${field.type.clazzName}.getInstance();
		} else {
			return this.${field.name};
		}
	}
#elseif ($field.type.vector || $field.type.map)

	public #attributeType($field) #newer($field)() {
		return this.${field.name} = this.$_${field.name};
	}
#elseif ($field.type.array)

	public #attributeType($field) #newer($field)(int n) {
		return this.${field.name} = new #newerType($field, "n");
	}
#end

#end
	//////////////////////////////////////////////////////////////////////////
	// 格式化输入/输出
	//////////////////////////////////////////////////////////////////////////
	/**
	 * 向指定的流中写入${messageBean.clazzName}
	 *
	 * @param output 用于写入${messageBean.clazzName}的java.io.OutputStream对象
	 */
	@Override
	public void serialize(OutputStream output) {
		BinaryMessageBeanFormat format = new BinaryMessageBeanFormat(
				${factoryName}.getInstance(), new DataOutputStream(output));
		serialize(format);
	}
	
	/**
	 * 格式化输出${messageBean.clazzName}
	 *
	 * @param format 用于格式化输出${messageBean.clazzName}的format对象
	 */
	@Override
	public void serialize(MessageBeanFormat format) {
		// 标记开始输出${messageBean.clazzName}
		format.beginWriteBean(this.getClass(), "${messageBean.clazzName}");

		// 序列化父类${messageBean.parentClazzName}
		super.serialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
		// 序列化域 ${fieldName}
#set ($field = ${messageBean.getField($fieldName)})
		#writer($field "format");
#end

		// 标记结束输出${messageBean.clazzName}
		format.endWriteBean(this.getClass(), "${messageBean.clazzName}");
	}
	
	/**
	 * 从指定的流中读入${messageBean.clazzName}
	 *
	 * @param format 用于读入${messageBean.clazzName}的java.io.InputStream对象
	 */
	 @Override
	 public MessageBean deserialize(InputStream input) {
		BinaryMessageBeanFormat format = new BinaryMessageBeanFormat(
				${factoryName}.getInstance(), new DataInputStream(input));
		return deserialize(format);
	 }

	/**
	 * 格式化读入${messageBean.clazzName}
	 *
	 * @param format 用于格式化读入${messageBean.clazzName}的format对象
	 */
	 @Override
	public MessageBean deserialize(MessageBeanFormat format) {
		// 反序列化父类${messageBean.parentClazzName}
		super.deserialize(format);

#foreach ($fieldName in $messageBean.fieldsName)
		// 反序列化域 ${fieldName}
#set ($field = ${messageBean.getField($fieldName)})
		#setter($field)(#reader($field "format"));
#end

		return this;
	}
	
	//////////////////////////////////////////////////////////////////////////
	// 辅助功能
	//////////////////////////////////////////////////////////////////////////
	/**
	 * 清空${messageBean.clazzName}中各field的值
	 */
	@Override
	public void clear() {
		// 清空父类
		super.clear();

#foreach ($fieldName in $messageBean.fieldsName)
#set ($field = ${messageBean.getField($fieldName)})
		#setter($field)(#defaultValue($field));
#if ($field.type.vector || $field.type.map)
		$_${fieldName}.clear();
#end
#end
	}
}
